Introdução a Go

Rodrigo Chacon
Desenvolvedor no Titans Group
@rochacon

* Um pouco de história

Go foi criado devido a frustração com as linguagens e ambientes existentes na época (final de 2007). Programar se tornou dificil e parte do problema eram as linguagens disponiveis.
O desejo e primeiras ideias de uma nova linguagem começaram em Setembro de 2007 por Robert Griesemer, Rob Pike e Ken Thompson.

A versão 1.0 de Go foi lançada em 10 de Novembro de 2009.

Go já conta com mais de 400 contribuidores.

* 

.image ./images/compiling.png

* Por que Go?

Afinal, por que escrever uma nova linguagem?

O objetivo de Go é combinar a facilidade de programação de linguagens de tipagem dinâmica com a eficiência e segurança de linguagens de tipagem estática, bom suporte a networking e multicore.

Go também deve ser rápido! Deve ser capaz de compilar projetos grandes em segundos.

* Go em poucas palavras

- Compilado
- Tipado estáticamente
- Sintaxe simples e limpa
- Sistema de tipos simples
- Concurrency primitives
- Batteries included
- Garbage collected
- Ótimas ferramentas
- Deployment fácil
- Open source

* Quem está usando Go?

- Docker (dotCloud)
- JuJu (Canonical)
- Tsuru (Globo.com)
- Heroku
- Mozilla
- CloudFlare
- Bit.ly
- SoundCloud

* Hello world

.play ./code/hello.go

* A linguagem Go

* Sistemas de tipos

Go é estaticamente tipado, mas conta com inferência de tipos.

    var x int = 1
    var y int32 = 2
    c := x + 3  // OK
    d := x + y  // Fail, type mismatch int and int32

* Builtin types (alguns)

- bool
- int, int8, int16, int32, int64
- uint, uint8, uint16, uint32, uint64
- float, float32, float64
- string
- error
- array
- slice
- map
- struct
- interface
- channel

* Orientação a objetos

- Go não tem classes, mas pode-se definir métodos para tipos
- Go não tem herança, mas é possível combinar tipos usando Composição 
- Interfaces

* Métodos

Métodos só podem ser declarados para os tipos definidos pelo usuário.

.play ./code/oo.go

* Composição

.play ./code/composition.go /START0/,/STOP0/

* Interfaces

Interface são coleções de assinaturas de métodos.

.code ./code/interfaces.go /START0/,/STOP0/

Um tipo que define a interface `Stringer`.

.code ./code/interfaces.go /START1/,/STOP1/

.code ./code/interfaces.go /START2/,/STOP2/

* Erros

Go não tem exceções, então erros devem ser tratados localmente.

.play ./code/errors.go

* Go tools

* Principais ferramentas

- go build – compila pacotes e suas dependências
- go doc – gera, printa e serve a documentação de pacotes
- go fmt – formata e refatora seu código
- go fix – ajusta seu código para sintaxe da nova versão
- go get – gerenciador de pacotes, instala pacotes e dependências
- go test – rodas os testes (na versão 1.2 também tem coverage)
- go run – compila e roda um app
- go help para ver os demais comandos =P

* Standard library

* net/http

- DoS hardened
- Serve o conteúdo do dl.google.com

.play ./code/http-server.go

* Testing

O comando `go` `test` irá buscar todos os arquivos com o pattern `*_test.go` e executará as funções que começam com `Test`.

.code ./code/testing_test.go /START0/,/STOP0/
.code ./code/testing_test.go /START1/,/STOP1/

* Concorrência

* Concurrency

- Goroutines
- Channels
- *sync* package

* Goroutines

Goroutines são _lightweight_ _threads_ gerenciadas pelo runtime do Go.
Para rodar uma função em uma nova Goroutine, coloque *go* antes da chamada da função.

.play ./code/goroutines.go

* Channels

Channels são *pipes* _tipados_ para comunicação entre goroutines. É possível enviar e receber valores de uma goroutine para outra.

"Don't communicate by sharing memory; share memory by communicating."

.code ./code/channels.go /START1/,/STOP1/

* Channels

.play ./code/channels.go /START0/,/STOP0/

* sync package

O pacote *sync* contém tipos básicos para lidar com concorrência, como *mutex* *locks*.

.code ./code/sync.go /STARTCOUNTER/,/STOPCOUNTER/
.code ./code/sync.go /STARTCHECK/,/STOPCHECK/

* sync package

.play ./code/sync.go /STARTMAIN/,/STOPMAIN/

* Dúvidas?

.image ./images/gophermega.jpg

* Links

- golang.org
- talks.golang.org
- tour.golang.org

